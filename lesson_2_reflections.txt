What happens when you initialize a repository? Why do you need to do it?
Git starts to keep a log of it and its functions can be used for version control.

How is the staging area different from the working directory and the repository? What value do you think it offers?
For files in staging area, git keeps a log and they can be committed, which is not the case for all files in the working directory, unless they are introduced to the staging area using git add. This allows selection of only the files needed for version control.

How can you use the staging area to make sure you have one commit per logical change?
You can first add the file to the staging area and compare that version with the last committed version, and finally commit the change if there's logical change as compared to the last commit. If not, do not commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to want to make different versions of the program, in paralel to the main or master version.

How do the diagrams help you visualize the branch structure?
Compresses multiple commits from multiple branches, so that I can see the whole picture of the relations between the commits along the branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Two versions of files are merged into one, with new additions and modifications kept, and deletions removed. These are represented in the diagram that to have a record of all the major version changes in a logical manner.
